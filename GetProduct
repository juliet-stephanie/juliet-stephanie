import axios from 'axios';
import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { FaSearch } from 'react-icons/fa';

const GetProduct = () => {
    const [products, setProduct] = useState([]);
    const [loading, setLoading] = useState('');
    const [error, setError] = useState('');
    const [filteredproduct, setFilteredproducts] = useState([]);
    const [searchQuery, setSearchQuery] = useState('');
    const [showSuggestions, setShowSuggestions] = useState(false);
    const [sortOrder, setSortOrder] = useState(''); // Sort Order (ascending, descending, or default)

    const [currentPage, setCurrentPage] = useState(1);
    const itemsPerPage = 10;

    const navigate = useNavigate();

    // Fetch products from API
    const getproducts = async () => {
        setLoading('Please wait...');
        try {
            const response = await axios.get("https://stephanie123.pythonanywhere.com/api/get_product_details");
            const sortedProducts = response.data.sort((a, b) =>
                a.product_name.toLowerCase() > b.product_name.toLowerCase() ? 1 : -1
            );
            setProduct(sortedProducts);
            setLoading('');
        } catch (error) {
            setLoading('');
            setError(error.message);
        }
    };

    useEffect(() => {
        getproducts();
    }, []);

    useEffect(() => {
        if (!products) return;
        const filtered = products.filter((product) =>
            product.product_name.toLowerCase().includes(searchQuery.toLowerCase()) ||
            product.product_description.toLowerCase().includes(searchQuery.toLowerCase())
        );
        setFilteredproducts(filtered);
        setCurrentPage(1);
    }, [searchQuery, products]);

    // Sort products based on the selected order
    useEffect(() => {
        if (sortOrder === '') return; // Do nothing if no sort order is selected
        const sorted = [...filteredproduct].sort((a, b) => {
            if (sortOrder === 'asc') {
                return a.product_cost - b.product_cost; // Ascending order
            }
            if (sortOrder === 'desc') {
                return b.product_cost - a.product_cost; // Descending order
            }
            return 0;
        });
        setFilteredproducts(sorted);
    }, [sortOrder, filteredproduct]);

    const indexOfLastItem = currentPage * itemsPerPage;
    const indexOfFirstItem = indexOfLastItem - itemsPerPage;
    const currentProducts = filteredproduct.slice(indexOfFirstItem, indexOfLastItem);

    const img_url = "https://stephanie123.pythonanywhere.com/static/images/";

    const getHighlightedText = (text, highlight) => {
        const parts = text.split(new RegExp(`(${highlight})`, 'gi'));
        return parts.map((part, i) =>
            part.toLowerCase() === highlight.toLowerCase() ? <b key={i}>{part}</b> : part
        );
    };

    return (
        <div className="container-fluid position-relative">
            {loading && <p>{loading}</p>}
            {error && <p className="text-danger">{error}</p>}

            {/* üîç Styled Search Input */}
            <div className="input-group shadow-sm my-4 position-relative">
                <span className="input-group-text bg-success text-white">
                    <FaSearch />
                </span>
                <input
                    type="text"
                    placeholder="Search products..."
                    className="form-control border-success"
                    style={{ borderLeft: '0', fontStyle: 'italic' }}
                    value={searchQuery}
                    onChange={(e) => {
                        setSearchQuery(e.target.value);
                        setShowSuggestions(true);
                    }}
                    onFocus={() => setShowSuggestions(true)}
                    onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}
                />
            </div>

            {/* üß† Dropdown Suggestions */}
            {showSuggestions && searchQuery && (
                <div className="shadow bg-white border rounded position-absolute w-100 p-2" style={{ zIndex: 10, maxHeight: '200px', overflowY: 'auto' }}>
                    {filteredproduct.slice(0, 5).map((product, index) => (
                        <div
                            key={index}
                            className="p-2 suggestion-item text-dark"
                            style={{ cursor: 'pointer' }}
                            onClick={() => {
                                setSearchQuery(product.product_name);
                                setShowSuggestions(false);
                            }}
                        >
                            {getHighlightedText(product.product_name, searchQuery)}
                        </div>
                    ))}
                    {filteredproduct.length === 0 && (
                        <div className="text-muted px-2">No results found</div>
                    )}
                </div>
            )}

            {/* Sorting options */}
            <div className="d-flex justify-content-between align-items-center my-4">
                <label>Sort by Price:</label>
                <select
                    className="form-select w-auto"
                    value={sortOrder}
                    onChange={(e) => setSortOrder(e.target.value)}
                >
                    <option value="">Select</option>
                    <option value="asc">Price Low to High</option>
                    <option value="desc">Price High to Low</option>
                </select>
            </div>

            {/* Product list */}
            <div className="row">
                {currentProducts.map((product, index) => (
                    <div className="col-md-3 justify-content-center mb-4" key={index}>
                        <div className="card shadow h-100">
                            <img src={img_url + product.product_photo} alt="Product" className="card-img-top product_img" />
                            <div className="card-body">
                                <h4 className="mt-2 text-success">{product.product_name}</h4>
                                <p className="text-danger">{product.product_description}</p>
                                <p className="text-black">{product.product_cost}</p>
                                <button className="btn btn-info w-100 mt-2" onClick={() => navigate('/mpesapayment', { state: { product } })}>
                                    Buy Now
                                </button>
                            </div>
                        </div>
                    </div>
                ))}
            </div>

            {/* Pagination controls */}
            <div className="d-flex justify-content-between align-items-center my-4">
                <button
                    className="btn btn-secondary"
                    onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
                    disabled={currentPage === 1}
                >
                    Previous
                </button>
                <span>Page {currentPage} of {Math.ceil(filteredproduct.length / itemsPerPage)}</span>
                <button
                    className="btn btn-secondary"
                    onClick={() => setCurrentPage((prev) =>
                        prev < Math.ceil(filteredproduct.length / itemsPerPage) ? prev + 1 : prev
                    )}
                    disabled={currentPage >= Math.ceil(filteredproduct.length / itemsPerPage)}
                >
                    Next
                </button>
            </div>
        </div>
    );
};

export default GetProduct;
